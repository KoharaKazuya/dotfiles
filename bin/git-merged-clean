#!/bin/sh

set -eu

usage() {
    cat <<HELP
usage: git ${0##*/git-} [<options>] <branch>...

    -a, --all             remove all merged branches
    --dry-run             show what branches would be removed

HELP
}

all=false
dry_run=false
while [ $# -gt 0 ]; do
    case "$1" in
        -a | --all     ) all=true;;
             --dry-run ) dry_run=true;;
        -*             ) usage; exit 1;;
        *              ) break;;
    esac
    shift
done


# リモートブランチの情報を同期する
git fetch --all --prune --quiet

# リモートに同名のブランチがあるマージ済みブランチ一覧
target_branches=$( \
  # 現在ブランチを除く、マージ済みブランチ一覧
  git branch --merged | grep -v -E '^\*' | \
  # 行頭と行末のスペースを削除
  sed -e 's/^ *//' | sed -e 's/ *$//' | \
  # master およびデフォルトブランチはターゲットとしない
  grep -vE '^master$' | grep -vE "^$(git config private.default-branch)$" | \
  # リモートにもブランチが存在するなら HEAD が同じものに絞り込む
  while read line; do \
    if ! git rev-parse remotes/origin/$line >/dev/null 2>&1 || [ "$(git rev-parse $line)" = "$(git rev-parse remotes/origin/$line)" ]; then \
      echo "$line"; \
    fi; \
  done \
)

# 引数がある場合は、全ての引数をターゲットとする
if [ $# -gt 0 ]; then
  # 全ての引数がマージ済みブランチかどうかチェック
  for tb in "$@"; do
    if ! (printf "$target_branches\n" | grep "$tb" >/dev/null 2>&1); then
      printf "Is not merged branch: $tb\n" >&2
      exit 1
    fi
  done
  branch_to_remove="$(for tb in "$@"; do printf "$tb\n"; done)"
# --all オプションがある場合は、全てのマージ済みブランチをターゲットとする
elif $all; then
  branch_to_remove="$target_branches"
# それ以外はエラー
else
  printf "Specify branch to remove\n" >&2
  exit 1
fi

# --dry-run オプションがある場合は、ターゲットを出力して終了
if $dry_run; then
  printf "$branch_to_remove\n"
  exit 0
fi

# 全てのターゲットをローカルとリモートから削除
for tb in $(printf "$target_branches" | tr '\n' ' '); do
  git _processing 'mc' "Removing $tb" "if git rev-parse remotes/origin/$tb >/dev/null 2>&1; then git push origin :$tb; fi && git branch -d $tb"
done
