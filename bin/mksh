#!/usr/bin/env node

const fs = require("fs").promises;

const helpMessage = `NAME:
  mksh -- Generate an executable shell script

SYNOPSIS:
  mksh [-h|--help]
  mksh [--bash] [--reset-cd]

DESCRIPTION:
  Generate an executable shell script.

  -h  --help      Print this help.
      --bash      Generate bash script (with \`pipefail\` option).
      --reset-cd  Add command to reset current directory.

EXAMPLE:
  mksh new_command.sh
`;

const options = {
  targetFile: "main.sh",
  bash: false,
  resetCd: false,
};
const args = process.argv.slice(2);
for (let i = 0; i < args.length; i++) {
  const arg = args[i];
  if (arg === "-h" || arg === "--help") {
    process.stderr.write(helpMessage);
    process.exit(0);
  } else if (arg === "--bash") {
    options.bash = true;
  } else if (arg === "--reset-cd") {
    options.resetCd = true;
  } else if (arg === "-") {
    options.targetFile = undefined;
  } else if (arg.startsWith("-")) {
    throw new Error("unknown option: " + arg);
  } else {
    options.targetFile = arg;
  }
}

const output = `#!/bin/${options.bash ? "bash" : "sh"}

set -eu${options.bash ? " -o pipefail" : ""}${
  options.resetCd
    ? `

cd "$(dirname "$0")"`
    : ""
}
`;

if (options.targetFile) {
  (async () => {
    await fs.writeFile(options.targetFile, output, { mode: 0o755 });
  })();
} else {
  process.stdout.write(output);
}
